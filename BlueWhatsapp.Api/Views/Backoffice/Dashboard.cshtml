@{
Layout = "_DashboardLayout";
ViewData["Title"] = "Dashboard";
ViewBag.ActivePage = "Dashboard";
}

@section Styles {
    <style>
        .map-container {
            background-image: url('https://api.mapbox.com/styles/v1/mapbox/light-v10/static/-71.0589,42.3601,11,0/600x400?access_token=pk.placeholder');
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.6/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
}

<div x-data="dashboard" class="flex-1 overflow-y-auto">
    <!-- Header -->
    <div class="p-4 flex items-center justify-between border-b">
        <div>
            <h1 class="text-lg font-semibold">Welcome</h1>
            <p class="text-sm text-gray-500">@DateTime.Now.ToString("dddd, dd MMM")</p>
        </div>

        <div class="flex items-center">
            <div class="relative mr-4">
                <input type="text" placeholder="Search" class="pl-8 pr-4 py-2 border rounded-md">
                <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
            </div>

            <div class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center ml-4">
                <img src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png" class="w-8 h-8 rounded-full" alt="Profile">
            </div>
        </div>
    </div>

    <!-- Dashboard Content -->
    <div class="p-4 grid grid-cols-12 gap-4">
        <!-- Left Column -->
        <div class="col-span-8 space-y-4">
            <!-- Stats Row -->
            <div class="grid grid-cols-2 gap-4">
                
                <!-- Work Orders Stat -->
                <div class="bg-white rounded-lg shadow p-4 py-8">
                    <div class="flex items-start justify-between">
                        <div>
                            <h3 class="text-3xl font-bold" x-text="pendingChatCount"></h3>
                            <p class="text-sm text-gray-500">Chats abiertos</p>
                        </div>
                        <div class="w-10 h-10 rounded-full bg-orange-100 flex items-center justify-center">
                            <i class="fas fa-clipboard-list text-orange-500"></i>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow p-4 py-8">
                    <div class="flex items-start justify-between">
                        <div>
                            <h3 class="text-3xl font-bold" x-text="closedChatCount"></h3>
                            <p class="text-sm text-gray-500">Chats cerrados</p>
                        </div>
                        <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
                            <i class="fas fa-box text-blue-500"></i>
                        </div>
                    </div>

                </div>
            </div>

            <!-- Charts Row -->
            <div class="grid grid-cols-2 gap-4">
                <!-- Customer Satisfaction -->
                <div class="bg-white rounded-lg shadow p-4">
                    <h2 class="font-medium mb-4">Customer Satisfaction</h2>
                    <div class="flex justify-center">
                        <div class="h-[300px] w-[300px] flex items-center justify-centers">
                            <canvas id="satisfactionChart" width="200" height="200"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Work Orders Per Day -->
                <div class="bg-white rounded-lg shadow p-4">
                    <h2 class="font-medium mb-4">Work Orders / Day</h2>
                </div>
            </div>
        </div>

        <!-- Right Column - Work Orders List -->
        <div class="col-span-4">
            <div class="bg-white rounded-lg shadow">
                <div class="p-4 border-b">
                    <h2 class="font-medium">Today's Work Orders</h2>
                </div>

                <!-- Work Order List -->
                <div class="divide-y">
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="bg-white p-3 py-5 rounded-lg shadow">
                            <div class="flex space-x-2 mb-1">
                                <span class="px-2 py-0.5 bg-red-600 text-white rounded-full text-xs">Prioridad</span>
                                <span class="px-2 py-0.5 bg-yellow-500 text-white rounded-full text-xs">Overdue</span>
                            </div>
                            <h3 class="font-medium">chat @i</h3>

                            <div class="flex items-center space-x-4 mt-1">
                                <div class="flex items-center">
                                    <i class="fas fa-map-marker-alt text-gray-400 mr-1"></i>
                                    <span class="text-sm">ubicacion</span>
                                </div>
                                <div class="flex items-center ">
                                    <i class="far fa-clock mr-1"></i>
                                    <span class="text-sm">Horario</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section MobileContent
{
<div class="p-4">
    <h1 class="text-lg font-semibold mb-3">Dashboard</h1>

    <!-- Stats Row -->
    <div class="grid grid-cols-2 gap-4 mb-4">
        <!-- Work Orders Stat -->
        <div class="bg-white rounded-lg shadow p-4">
            <div class="flex items-start justify-between">
                <div>
                    <h3 class="text-3xl font-bold">3</h3>
                    <p class="text-sm text-gray-500">Work Orders</p>
                </div>
                <div class="w-10 h-10 rounded-full bg-orange-100 flex items-center justify-center">
                    <i class="fas fa-clipboard-list text-orange-500"></i>
                </div>
            </div>
        </div>

        <!-- Items to Pick Up Stat -->
        <div class="bg-white rounded-lg shadow p-4">
            <div class="flex items-start justify-between">
                <div>
                    <h3 class="text-3xl font-bold">2</h3>
                    <p class="text-sm text-gray-500">Items</p>
                </div>
                <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
                    <i class="fas fa-box text-blue-500"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Today's Work Orders -->
    <h2 class="font-medium mb-2">Today's Work Orders</h2>
    <div class="space-y-2 mb-4">
     
    </div>

    <a href="#" class="w-full bg-green-500 text-white py-2 rounded-md text-center block mb-4">
        View All Work Orders
    </a>
</div>
}

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('dashboard', () => ({
            openChats: 0,
            totalMessages: 0,
            recentMessages: [],
            currentConversation: null,
            conversationMessages: [],
            connection: null,
            
            pendingChats: [],
            closedChats: [],
            
            get pendingChatCount() {
                return this.pendingChats.length;
            },
            
            get closedChatCount() {
                return this.closedChats.length;
            },
            
            init() {
                this.connection = new signalR.HubConnectionBuilder()
                    .withUrl("/messages")
                    .withAutomaticReconnect()
                    .build();

                this.connection.on('ReceiveOpenChats', (openChats) => {
                    const mappedPendingChats = openChats.map(m => ({
                        from: m.from,
                        timestamp: new Date(m.createdTime).toLocaleString()
                    }))

                    this.pendingChats = mappedPendingChats
                })

                this.connection.on('ReceiveClosedMessages', (openChats) => {
                    const mappedClosedChats = openChats.map(m => ({
                        from: m.from,
                        timestamp: new Date(m.createdTime).toLocaleString()
                    }))

                    this.closedChats = mappedClosedChats
                })

                // Handle receiving a new message
                this.connection.on("ReceiveWhatsAppMessage", (from, timestamp) => {
                    this.connection.invoke("GetPendingMessages")
                    this.connection.invoke("GetClosedMessages")
                });

                // Handle receiving recent messages
                this.connection.on("ReceiveRecentMessages", (messages) => {
                    this.recentMessages = messages.map(m => ({
                        from: m.from,
                        timestamp: new Date(m.createdTime).toLocaleString()
                    }));
                });

                // Handle receiving message history for a conversation
                this.connection.on("ReceiveMessageHistory", (from, messages) => {
                    this.currentConversation = from;
                    this.conversationMessages = messages.map(m => ({
                        from: m.from,
                        body: m.body,
                        timestamp: new Date(m.createdTime).toLocaleString()
                    }));
                });

                // Start the connection
                this.connection.start()
                    .then(() => {
                        this.connection.invoke("GetPendingMessages");
                        this.connection.invoke("GetClosedMessages");
                    })
                    .catch(err => console.error("SignalR Connection Error: ", err));
            },
            // Method to load a conversation
            loadConversation(from)
            {
                this.connection.invoke("GetMessagesByFrom", from);
            },
            // Method to show browser notification
            showNotification(from)
            {
                if (Notification.permission === "granted")
                {
                    new Notification("New WhatsApp Message", {body: `New message from ${from}`});
                } else if (Notification.permission !== "denied") {
                    Notification.requestPermission();
                }
            }
        }));
    })
</script>
